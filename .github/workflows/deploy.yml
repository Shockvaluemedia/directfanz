name: Deploy to Production

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Run tests and quality checks
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: directfan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test

      - name: Run database migrations
        run: pnpm prisma db push
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test

      - name: Run type checking
        run: pnpm type-check

      - name: Run linting
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test:unit
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          STRIPE_SECRET_KEY: sk_test_mock
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Run integration tests
        run: pnpm test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          STRIPE_SECRET_KEY: sk_test_mock
          NEXTAUTH_SECRET: test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Generate coverage report
        run: pnpm test:coverage
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/directfan_test
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: true

      - name: Security audit
        run: pnpm audit --prod

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          UPLOADCARE_PUBLIC_KEY: ${{ secrets.UPLOADCARE_PUBLIC_KEY }}
          UPLOADCARE_SECRET_KEY: ${{ secrets.UPLOADCARE_SECRET_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 7

  # Deploy to staging (on pull request)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'
    environment:
      name: staging
      url: https://staging.directfan.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: staging.directfan.com

      - name: Run database migrations (Staging)
        run: |
          pnpm prisma db push
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Run smoke tests
        run: |
          pnpm test:e2e:staging
        env:
          TEST_BASE_URL: https://staging.directfan.com
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

  # Deploy to production (on main branch push)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://directfan.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          alias-domains: directfan.com

      - name: Run database migrations (Production)
        run: |
          pnpm prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Warm up application
        run: |
          curl -f https://directfan.com/api/health || exit 1
          curl -f https://directfan.com/ || exit 1

      - name: Run production smoke tests
        run: |
          pnpm test:e2e:production
        env:
          TEST_BASE_URL: https://directfan.com

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ Direct Fan deployed successfully to production!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: success()

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå Direct Fan deployment failed!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  # Health check and rollback
  health-check:
    name: Health Check & Rollback
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Check application health
        id: health-check
        run: |
          # Check main endpoints
          curl -f https://directfan.com/api/health || exit 1
          curl -f https://directfan.com/api/status || exit 1

          # Check database connectivity
          response=$(curl -s https://directfan.com/api/health/db)
          if [[ $response != *"healthy"* ]]; then
            echo "Database health check failed"
            exit 1
          fi

          # Check Redis connectivity
          response=$(curl -s https://directfan.com/api/health/redis)
          if [[ $response != *"healthy"* ]]; then
            echo "Redis health check failed"
            exit 1
          fi

          echo "All health checks passed"

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Health checks failed, initiating rollback..."
          # This would rollback to the previous deployment
          # Implementation depends on your deployment strategy
          curl -X POST "https://api.vercel.com/v1/deployments/${{ secrets.PREVIOUS_DEPLOYMENT_ID }}/promote" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}"

      - name: Alert on health check failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® Production health checks failed! Rollback initiated.'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: failure()

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://directfan.com
            https://directfan.com/artists
            https://directfan.com/login
          configPath: './lighthouse-config.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Load testing
        run: |
          # Simple load test using curl
          for i in {1..50}; do
            curl -w "%{time_total}\n" -o /dev/null -s https://directfan.com/ &
          done
          wait
          echo "Load test completed"

      - name: Performance budget check
        run: |
          # Check if performance metrics meet requirements
          response_time=$(curl -w "%{time_total}" -o /dev/null -s https://directfan.com/)
          if (( $(echo "$response_time > 2.0" | bc -l) )); then
            echo "Response time too slow: ${response_time}s"
            exit 1
          fi
          echo "Performance check passed: ${response_time}s"
